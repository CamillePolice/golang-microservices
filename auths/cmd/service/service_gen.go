// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
	endpoint "golangmicroservices/auths/pkg/endpoint"
	http1 "golangmicroservices/auths/pkg/http"
	service "golangmicroservices/auths/pkg/service"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"CreateAuth":           {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "CreateAuth", logger))},
		"DeleteAuth":           {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteAuth", logger))},
		"ExtractTokenMetadata": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ExtractTokenMetadata", logger))},
		"FetchAuth":            {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "FetchAuth", logger))},
		"GetJWT":               {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetJWT", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["GetJWT"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetJWT")), endpoint.InstrumentingMiddleware(duration.With("method", "GetJWT"))}
	mw["CreateAuth"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "CreateAuth")), endpoint.InstrumentingMiddleware(duration.With("method", "CreateAuth"))}
	mw["DeleteAuth"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteAuth")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteAuth"))}
	mw["ExtractTokenMetadata"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "ExtractTokenMetadata")), endpoint.InstrumentingMiddleware(duration.With("method", "ExtractTokenMetadata"))}
	mw["FetchAuth"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "FetchAuth")), endpoint.InstrumentingMiddleware(duration.With("method", "FetchAuth"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"GetJWT", "CreateAuth", "DeleteAuth", "ExtractTokenMetadata", "FetchAuth"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
