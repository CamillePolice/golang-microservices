// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "golangmicroservices/auths/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	GetJWTEndpoint               endpoint.Endpoint
	CreateAuthEndpoint           endpoint.Endpoint
	DeleteAuthEndpoint           endpoint.Endpoint
	ExtractTokenMetadataEndpoint endpoint.Endpoint
	FetchAuthEndpoint            endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.AuthsService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		CreateAuthEndpoint:           MakeCreateAuthEndpoint(s),
		DeleteAuthEndpoint:           MakeDeleteAuthEndpoint(s),
		ExtractTokenMetadataEndpoint: MakeExtractTokenMetadataEndpoint(s),
		FetchAuthEndpoint:            MakeFetchAuthEndpoint(s),
		GetJWTEndpoint:               MakeGetJWTEndpoint(s),
	}
	for _, m := range mdw["GetJWT"] {
		eps.GetJWTEndpoint = m(eps.GetJWTEndpoint)
	}
	for _, m := range mdw["CreateAuth"] {
		eps.CreateAuthEndpoint = m(eps.CreateAuthEndpoint)
	}
	for _, m := range mdw["DeleteAuth"] {
		eps.DeleteAuthEndpoint = m(eps.DeleteAuthEndpoint)
	}
	for _, m := range mdw["ExtractTokenMetadata"] {
		eps.ExtractTokenMetadataEndpoint = m(eps.ExtractTokenMetadataEndpoint)
	}
	for _, m := range mdw["FetchAuth"] {
		eps.FetchAuthEndpoint = m(eps.FetchAuthEndpoint)
	}
	return eps
}
