// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "golangmicroservices/accounts/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	SignUpEndpoint      endpoint.Endpoint
	SignInEndpoint      endpoint.Endpoint
	LogoutEndpoint      endpoint.Endpoint
	UpdateEndpoint      endpoint.Endpoint
	DeleteEndpoint      endpoint.Endpoint
	MeEndpoint          endpoint.Endpoint
	GetEndpoint         endpoint.Endpoint
	GetUserInfoEndpoint endpoint.Endpoint
	AddFundsEndpoint    endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.AccountsService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		AddFundsEndpoint:    MakeAddFundsEndpoint(s),
		DeleteEndpoint:      MakeDeleteEndpoint(s),
		GetEndpoint:         MakeGetEndpoint(s),
		GetUserInfoEndpoint: MakeGetUserInfoEndpoint(s),
		LogoutEndpoint:      MakeLogoutEndpoint(s),
		MeEndpoint:          MakeMeEndpoint(s),
		SignInEndpoint:      MakeSignInEndpoint(s),
		SignUpEndpoint:      MakeSignUpEndpoint(s),
		UpdateEndpoint:      MakeUpdateEndpoint(s),
	}
	for _, m := range mdw["SignUp"] {
		eps.SignUpEndpoint = m(eps.SignUpEndpoint)
	}
	for _, m := range mdw["SignIn"] {
		eps.SignInEndpoint = m(eps.SignInEndpoint)
	}
	for _, m := range mdw["Logout"] {
		eps.LogoutEndpoint = m(eps.LogoutEndpoint)
	}
	for _, m := range mdw["Update"] {
		eps.UpdateEndpoint = m(eps.UpdateEndpoint)
	}
	for _, m := range mdw["Delete"] {
		eps.DeleteEndpoint = m(eps.DeleteEndpoint)
	}
	for _, m := range mdw["Me"] {
		eps.MeEndpoint = m(eps.MeEndpoint)
	}
	for _, m := range mdw["Get"] {
		eps.GetEndpoint = m(eps.GetEndpoint)
	}
	for _, m := range mdw["GetUserInfo"] {
		eps.GetUserInfoEndpoint = m(eps.GetUserInfoEndpoint)
	}
	for _, m := range mdw["AddFunds"] {
		eps.AddFundsEndpoint = m(eps.AddFundsEndpoint)
	}
	return eps
}
