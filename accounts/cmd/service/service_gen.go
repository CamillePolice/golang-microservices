// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
	endpoint "golangmicroservices/accounts/pkg/endpoint"
	http1 "golangmicroservices/accounts/pkg/http"
	service "golangmicroservices/accounts/pkg/service"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"AddFunds":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AddFunds", logger))},
		"Delete":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Delete", logger))},
		"Get":         {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Get", logger))},
		"GetUserInfo": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetUserInfo", logger))},
		"Logout":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Logout", logger))},
		"Me":          {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Me", logger))},
		"SignIn":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "SignIn", logger))},
		"SignUp":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "SignUp", logger))},
		"Update":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Update", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["SignUp"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "SignUp")), endpoint.InstrumentingMiddleware(duration.With("method", "SignUp"))}
	mw["SignIn"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "SignIn")), endpoint.InstrumentingMiddleware(duration.With("method", "SignIn"))}
	mw["Logout"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Logout")), endpoint.InstrumentingMiddleware(duration.With("method", "Logout"))}
	mw["Update"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Update")), endpoint.InstrumentingMiddleware(duration.With("method", "Update"))}
	mw["Delete"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Delete")), endpoint.InstrumentingMiddleware(duration.With("method", "Delete"))}
	mw["Me"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Me")), endpoint.InstrumentingMiddleware(duration.With("method", "Me"))}
	mw["Get"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Get")), endpoint.InstrumentingMiddleware(duration.With("method", "Get"))}
	mw["GetUserInfo"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetUserInfo")), endpoint.InstrumentingMiddleware(duration.With("method", "GetUserInfo"))}
	mw["AddFunds"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AddFunds")), endpoint.InstrumentingMiddleware(duration.With("method", "AddFunds"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"SignUp", "SignIn", "Logout", "Update", "Delete", "Me", "Get", "GetUserInfo", "AddFunds"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
